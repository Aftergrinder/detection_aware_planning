// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sgtmpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WebAPIClient is the client API for WebAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebAPIClient interface {
	//rpc Register(Register.Request) returns (Register.Response) { option (google.api.http) = {post: "/api/v1/Register", body: "*"}; }
	UserList(ctx context.Context, in *UserList_Request, opts ...grpc.CallOption) (*UserList_Response, error)
	PostList(ctx context.Context, in *PostList_Request, opts ...grpc.CallOption) (*PostList_Response, error)
	// rpc PostSync(PostSync.Request) returns (PostSync.Response) { option (google.api.http) = {get: "/api/v1/PostSync"}; }
	Me(ctx context.Context, in *Me_Request, opts ...grpc.CallOption) (*Me_Response, error)
	Ping(ctx context.Context, in *Ping_Request, opts ...grpc.CallOption) (*Ping_Response, error)
	Status(ctx context.Context, in *Status_Request, opts ...grpc.CallOption) (*Status_Response, error)
}

type webAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWebAPIClient(cc grpc.ClientConnInterface) WebAPIClient {
	return &webAPIClient{cc}
}

func (c *webAPIClient) UserList(ctx context.Context, in *UserList_Request, opts ...grpc.CallOption) (*UserList_Response, error) {
	out := new(UserList_Response)
	err := c.cc.Invoke(ctx, "/sgtm.WebAPI/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAPIClient) PostList(ctx context.Context, in *PostList_Request, opts ...grpc.CallOption) (*PostList_Response, error) {
	out := new(PostList_Response)
	err := c.cc.Invoke(ctx, "/sgtm.WebAPI/PostList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAPIClient) Me(ctx context.Context, in *Me_Request, opts ...grpc.CallOption) (*Me_Response, error) {
	out := new(Me_Response)
	err := c.cc.Invoke(ctx, "/sgtm.WebAPI/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAPIClient) Ping(ctx context.Context, in *Ping_Request, opts ...grpc.CallOption) (*Ping_Response, error) {
	out := new(Ping_Response)
	err := c.cc.Invoke(ctx, "/sgtm.WebAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAPIClient) Status(ctx context.Context, in *Status_Request, opts ...grpc.CallOption) (*Status_Response, error) {
	out := new(Status_Response)
	err := c.cc.Invoke(ctx, "/sgtm.WebAPI/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebAPISer